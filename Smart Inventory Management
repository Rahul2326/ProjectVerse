#include <iostream>
#include <stdexcept>
#include <limits>
using namespace std;
#define MAX_PRODUCTS 100
class Product {
protected:
    string name;
    int id;
    double price;
    int stock;
public:
    Product(string n = "", int i = 0, double p = 0.0, int s = 0) : name(n), id(i), price(p), stock(s) {}
    virtual ~Product() {}
    virtual void display() const {
        cout << "ID: " << id << "\tName: " << name << "\tPrice: $" << price << "\tStock: " << stock << endl;
    }
    virtual void updateStock(int quantity) {
        if (quantity > stock) {
            throw runtime_error("Stock not sufficient!");
        }
        stock -= quantity;
    }
    bool operator>(const Product &p) const { return price > p.price; }
    bool operator<(const Product &p) const { return price < p.price; }
    int getId() const { return id; }
    int getStock() const { return stock; }
};
class Electronics : public Product {
private:
    int warranty;
public:
    Electronics(string n = "", int i = 0, double p = 0.0, int s = 0, int w = 0) : Product(n, i, p, s), warranty(w) {}
    void display() const override {
        Product::display();
        cout << "Warranty: " << warranty << " years" << endl;
    }
};
class Grocery : public Product {
private:
    string expiryDate;
public:
    Grocery(string n = "", int i = 0, double p = 0.0, int s = 0, string e = "") : Product(n, i, p, s), expiryDate(e) {}
    void display() const override {
        Product::display();
        cout << "Expiry Date: " << expiryDate << endl;
    }
};
Product *products[MAX_PRODUCTS];
int prodCount = 0;
bool isIdExists(int id) {
    for (int i = 0; i < prodCount; i++) {
        if (products[i]->getId() == id) {
            return true;
        }
    }
    return false;
}
void validateInput(double& value, const string& prompt) {
    while (true) {
        cout << prompt;
        cin >> value;
        if (cin.fail() || value < 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input! Please enter a valid positive number." << endl;
        } else break;
    }
}
void validateInput(int& value, const string& prompt) {
    while (true) {
        cout << prompt;
        cin >> value;
        if (cin.fail() || value < 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input! Please enter a valid positive integer." << endl;
        } else break;
    }
}
void searchProduct(int id) {
    for (int i = 0; i < prodCount; i++) {
        if (products[i]->getId() == id) {
            products[i]->display();
            return;
        }
    }
    cout << "Product not found!" << endl;
}
void sortProducts() {
    for (int i = 0; i < prodCount - 1; i++) {
        for (int j = 0; j < prodCount - i - 1; j++) {
            if (*products[j] > *products[j + 1]) {
                swap(products[j], products[j + 1]);
            }
        }
    }
    cout << "Products sorted by price." << endl;
}
int main() {
    int choice;
    do {
        cout << "\nInventory Management System" << endl;
        cout << "1. Add Electronics Product" << endl;
        cout << "2. Add Grocery Product" << endl;
        cout << "3. Display Products" << endl;
        cout << "4. Update Stock" << endl;
        cout << "5. Delete Product" << endl;
        cout << "6. Search Product" << endl;
        cout << "7. Sort Products by Price" << endl;
        cout << "8. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        if (choice == 1 || choice == 2) {
            if (prodCount >= MAX_PRODUCTS) {
                cout << "Inventory full! Cannot add more products." << endl;
                continue;
            }
            string name;
            int id, stock;
            double price;
            cout << "Enter Product Name: ";
            cin >> name;
            cout << "Enter Product ID: ";
            cin >> id;
            if (isIdExists(id)) {
                cout << "Error: Product with ID " << id << " already exists!" << endl;
                continue;
            }
            validateInput(price, "Enter Product Price: ");
            validateInput(stock, "Enter Product Stock: ");
            if (choice == 1) {
                int warranty;
                cout << "Enter Warranty (years): ";
                cin >> warranty;
                products[prodCount++] = new Electronics(name, id, price, stock, warranty);
            } else {
                string expiry;
                cout << "Enter Expiry Date (YYYY-MM-DD): ";
                cin >> expiry;
                products[prodCount++] = new Grocery(name, id, price, stock, expiry);
            }
            cout << "Product added successfully!" << endl;
        }
        else if (choice == 3) {
            if (prodCount == 0) cout << "No products available!" << endl;
            else for (int i = 0; i < prodCount; i++) products[i]->display();
        }
        else if (choice == 6) {
            int id;
            cout << "Enter Product ID to Search: ";
            cin >> id;
            searchProduct(id);
        }
        else if (choice == 7) {
            sortProducts();
        }
        else if (choice == 8) {
            cout << "Exiting program..." << endl;
        }
        else {
            cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 8);

    for (int i = 0; i < prodCount; i++) delete products[i];
    return 0;
}

